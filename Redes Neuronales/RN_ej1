import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.linear_model import Perceptron
import matplotlib.pyplot as plt


class PerceptronSimple:
    def __init__(self, learning_rate, epochs):
        self.weights = None
        self.bias = None
        self.learning_rate = learning_rate
        self.epochs = epochs

    def reporte(self):
        return self.weights, self.bias

        # Función de activación: Heaviside

    def activation(self, z):
        return np.heaviside(z, 0)

    def fit(self, X, y):
        n_features = X.shape[1]

        # Inicialización de parámetros (w y b)
        self.weights = np.zeros((n_features))
        self.bias = 0

        # Iterar n épocas
        for epoch in range(self.epochs):
            # De a un dato a la vez
            for i in range(len(X)):
                z = (
                    np.dot(X, self.weights) + self.bias
                )  # Producto escalar de entradas y pesos + b
                y_pred = self.activation(
                    z
                )  # Función de activación no lineal (Heaviside)

                # Actualización de pesos y bias
                self.weights = (
                    self.weights + self.learning_rate * (y[i] - y_pred[i]) * X[i]
                )
                self.bias = self.bias + self.learning_rate * (y[i] - y_pred[i])

        return self.weights, self.bias

    def predict(self, X):
        z = np.dot(X, self.weights) + self.bias
        return self.activation(z)


perceptron = PerceptronSimple
